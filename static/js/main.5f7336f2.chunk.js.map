{"version":3,"sources":["store/actions.ts","store/index.ts","api.ts","store/selectors.ts","components/PokemonCard/PokemonCard.tsx","components/PokemonInfo/PokemonInfo.tsx","components/PokemonList/PokemonList.tsx","App.tsx","index.tsx"],"names":["ActionType","SetPokemonsAction","payload","type","SET_POKEMONS","SetSelectedPokemonAction","SET_SELECTED_POKEMON","getNextfetchPokemonByURL","offset","dispatch","axios","get","then","response","data","results","initialState","pokemons","selectedPokemon","store","createStore","state","action","applyMiddleware","thunkMiddleware","getPockemonsType","a","getSelectedPokemonSelector","PokemonCard","pokemon","useDispatch","useSelector","className","src","photo","alt","name","types","map","url","onClick","currentPokemon","PokemonInfo","pokemonInfo","id","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","stats","stat","base_stat","moves","move","PokemonList","useState","setOffset","query","setQuery","setTypes","selectedType","setSelectedType","pokemonsByQuery","filter","toLowerCase","includes","some","item","getVisiblePokemons","useEffect","allPokemonsFromServer","Promise","all","infoAbout","response2","preparedPokemons","sprites","front_default","info","pokemonWithInfo","typesFromServer","console","log","getPrevPokemons","offsets","newOffset","placeholder","value","onChange","event","target","disabled","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f7336f2.chunk.js","sourcesContent":["import axios from 'axios';\n// eslint-disable-next-line import/no-cycle\nimport { AppDispatch } from './index';\n// eslint-disable-next-line import/no-cycle\n// import { RootState, AppDispatch } from './index';\n// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { Pokemon, Type } from '../react-app-env';\n// import { AppDispatch } from './index';\n\n// eslint-disable-next-line no-shadow\nexport enum ActionType {\n  SET_POKEMONS = 'SET_POKEMONS',\n  SET_SELECTED_POKEMON = 'SET_SELECTED_POKEMON',\n}\n\ninterface SetPokemons {\n  type: ActionType.SET_POKEMONS,\n  payload: Pokemon[],\n}\n\ninterface SetSelectedPokemon {\n  type: ActionType.SET_SELECTED_POKEMON,\n  payload: Pokemon | null,\n}\n\nexport type Action = SetPokemons | SetSelectedPokemon;\n\nexport const SetPokemonsAction = (payload: Pokemon[]): Action => ({\n  type: ActionType.SET_POKEMONS,\n  payload,\n});\n\nexport const SetSelectedPokemonAction = (payload: Pokemon | null): Action => ({\n  type: ActionType.SET_SELECTED_POKEMON,\n  payload,\n});\n\n// export const getFetchPokemonByURL = () => {\n//   return (dispatch: AppDispatch) => {\n//     return axios.get('https://pokeapi.co/api/v2/pokemon?limit=20&offset=0')\n//       .then(response => dispatch(SetPokemonsAction(response.data.results)));\n//   };\n// };\n\nexport const getFetchPokemonByURL = () => {\n  return async (dispatch: AppDispatch) => {\n    const allPokemonsFromServer = await axios.get('https://pokeapi.co/api/v2/pokemon?limit=20&offset=0');\n    const response = allPokemonsFromServer.data.results;\n\n    // eslint-disable-next-line no-console\n    // console.log(response);\n    // eslint-disable-next-line max-len\n    const pokemonWithInfo: Pokemon[] = await Promise.all(response.map(async (pokemon: { url: string; name: string; }) => {\n      const infoAbout = await axios.get(pokemon.url);\n      const response2 = await infoAbout.data;\n\n      const preparedPokemons: Pokemon = {\n        name: pokemon.name,\n        url: pokemon.url,\n        photo: response2.sprites.front_default,\n        types: response2.types.map((type: { type: Type; }) => ({\n          name: type.type.name,\n          url: type.type.url,\n        })),\n        info: {\n          stats: response2.stats,\n          moves: response2.moves,\n        },\n      };\n\n      return preparedPokemons;\n    }));\n\n    return dispatch(SetPokemonsAction(pokemonWithInfo));\n  };\n};\n\nexport const getNextfetchPokemonByURL = (offset: number) => {\n  return (dispatch: AppDispatch) => {\n    return axios.get(`https://pokeapi.co/api/v2/pokemon?limit=20&offset=${offset}`)\n      .then(response => dispatch(SetPokemonsAction(response.data.results)));\n  };\n};\n","// import axios from 'axios';\nimport { createStore, applyMiddleware, AnyAction } from 'redux';\nimport thunkMiddleware, { ThunkDispatch } from 'redux-thunk';\n// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { State } from '../react-app-env';\n// eslint-disable-next-line import/no-cycle\nimport { Action, ActionType } from './actions';\n\nconst initialState: State = {\n  pokemons: [],\n  selectedPokemon: null,\n};\n\nconst reducer = (state = initialState, action: Action): State => {\n  switch (action.type) {\n    case ActionType.SET_POKEMONS:\n      return {\n        ...state,\n        pokemons: [...action.payload],\n      };\n\n    case ActionType.SET_SELECTED_POKEMON:\n      return {\n        ...state,\n        selectedPokemon: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer, applyMiddleware(thunkMiddleware));\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport type TypedDispatch = ThunkDispatch<RootState, any, AnyAction>;\n","import axios from 'axios';\n// const URL_TYPE = 'https://pokeapi.co/api/v2/type/';\n\nexport const getPockemons = async (url:string) => {\n  const response = await axios.get(url);\n\n  return response.data;\n};\n\nexport const getPockemonsInfo = async (url:string) => {\n  const response = await axios.get(url);\n\n  return response.data;\n};\n\nexport const getPockemonsType = async () => {\n  const response = await axios.get('https://pokeapi.co/api/v2/type/');\n\n  return response.data;\n};\n","// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { State } from '../react-app-env';\n\nexport const getPokemonsSelector = (state: State) => state.pokemons;\nexport const getSelectedPokemonSelector = (state: State) => state.selectedPokemon;\n\nexport const getVisiblePokemons = (query: string, selectedType: string) => {\n  return (state: State) => {\n    const pokemonsByQuery = state.pokemons.filter(pokemon => (\n      pokemon.name.toLowerCase().includes(query.toLowerCase())\n    ));\n\n    if (selectedType) {\n      const pokemonsByType = pokemonsByQuery.filter(pokemon => (\n        pokemon.types.some(item => item.name === selectedType)\n      ));\n\n      return pokemonsByType;\n    }\n\n    return pokemonsByQuery;\n  };\n};\n","import React from 'react';\n// import classnames from 'classnames';\nimport './PokemonCard.scss';\nimport { useDispatch, useSelector } from 'react-redux';\n// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { Pokemon } from '../../react-app-env';\nimport { SetSelectedPokemonAction } from '../../store/actions';\nimport { getSelectedPokemonSelector } from '../../store/selectors';\nimport { TypedDispatch } from '../../store/index';\n\ninterface Props {\n  pokemon: Pokemon,\n}\n\nexport const PokemonCard: React.FC<Props> = ({ pokemon }) => {\n  const dispatch: TypedDispatch = useDispatch();\n  const selectedPokemon = useSelector(getSelectedPokemonSelector);\n\n  const selectPokemon = (currentPokemon: Pokemon) => {\n    if (selectedPokemon?.name !== currentPokemon.name) {\n      dispatch(SetSelectedPokemonAction(currentPokemon));\n    } else {\n      dispatch(SetSelectedPokemonAction(null));\n    }\n  };\n\n  return (\n    <div className=\"car-card col-sm-6 col-md-4 col-xl-3\">\n      <div className=\"card border-white shadow\">\n        <img src={pokemon.photo} className=\"card-img-top\" alt=\"photo112\" />\n        <div className=\"car-card__body card-body\">\n          <h5 className=\"car-card__title card-title\">{pokemon.name}</h5>\n\n          {pokemon.types.map((type => (\n            <button type=\"button\" key={type.url}>{type.name}</button>\n          )))}\n\n          <div>\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              onClick={() => selectPokemon(pokemon)}\n            >\n              Show more\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './PokemonInfo.scss';\n// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { Info } from '../../react-app-env';\n\ninterface Props {\n  pokemonInfo: Info,\n}\n\nexport const PokemonInfo: React.FC<Props> = ({ pokemonInfo }) => {\n  return (\n    <div className=\"container\">\n      <h2 className=\"text-centered\">Pokemon details:</h2>\n\n      <div className=\"accordion\">\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingOne\">\n            <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n              <strong>Stats:</strong>\n            </button>\n          </h2>\n          <div id=\"collapseOne\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\n            <div className=\"accordion-body\">\n              {pokemonInfo.stats.map(stat => (\n                <p key={stat.stat.url}>{`${stat.stat.name} - ${stat.base_stat}`}</p>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\n            <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"true\" aria-controls=\"collapseTwo\">\n              <strong>Moves:</strong>\n            </button>\n          </h2>\n          <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\n            <div className=\"accordion-body\">\n              {pokemonInfo.moves.map(move => (\n                <p key={move.move.url}>{move.move.name}</p>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './PokemonList.scss';\n// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { Type } from '../../react-app-env';\nimport { getPockemonsType } from '../../api';\nimport { getFetchPokemonByURL, getNextfetchPokemonByURL } from '../../store/actions';\nimport { getVisiblePokemons, getSelectedPokemonSelector } from '../../store/selectors';\nimport { TypedDispatch } from '../../store/index';\n// eslint-disable-next-line import/named\nimport { PokemonCard } from '../PokemonCard';\nimport { PokemonInfo } from '../PokemonInfo';\n\nexport const PokemonList: React.FC = () => {\n  // getPockemonsInfo('https://pokeapi.co/api/v2/type/')\n  // // eslint-disable-next-line no-console\n  //   .then(pokemonsFromServer => console.log(pokemonsFromServer.results));\n\n  const dispatch: TypedDispatch = useDispatch();\n  const [offset, setOffset] = useState(20);\n  const [query, setQuery] = useState('');\n  const [types, setTypes] = useState<Type[]>([]);\n  const [selectedType, setSelectedType] = useState('');\n  const pokemons = useSelector(getVisiblePokemons(query, selectedType));\n  const selectedPokemon = useSelector(getSelectedPokemonSelector);\n\n  useEffect(() => {\n    dispatch(getFetchPokemonByURL());\n\n    getPockemonsType()\n      .then(typesFromServer => setTypes(typesFromServer.results));\n  }, []);\n\n  // eslint-disable-next-line no-console\n  console.log(pokemons);\n\n  // eslint-disable-next-line no-console\n  console.log(selectedPokemon);\n\n  // const API = 'https://pokeapi.co/api/v2/pokemon';\n  // const pokemons = useSelector(getPokemonsSelector);\n\n  // getPockemons('https://pokeapi.co/api/v2/pokemon/132')\n  //   // eslint-disable-next-line no-console\n  //   .then(pokemonsFromServer => console.log(pokemonsFromServer));\n\n  // const infoAbout = await axios.get(pokemon.url);\n\n  const getNewPokemons = (offsets: number) => {\n    if (offsets < 1155) {\n      dispatch(getNextfetchPokemonByURL(offsets));\n\n      setOffset(offsets + 20);\n    }\n  };\n\n  const getPrevPokemons = async (offsets: number) => {\n    if (offsets - 20 > 0) {\n      const newOffset = offsets - 40;\n\n      dispatch(getNextfetchPokemonByURL(newOffset));\n      setOffset(newOffset + 20);\n    }\n  };\n\n  return (\n    <div className=\"pokemons\">\n      <div className=\"pokemons__block\">\n        <div className=\"pokemons__content container\">\n          <button\n            type=\"button\"\n            onClick={() => {\n              getPrevPokemons(offset);\n            }}\n          >\n            Previous page\n          </button>\n\n          <button\n            type=\"button\"\n            onClick={() => {\n              getNewPokemons(offset);\n            }}\n          >\n            Next page\n          </button>\n\n          <div>\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"Search Pokemon\"\n              value={query}\n              onChange={(event) => setQuery(event.target.value)}\n            />\n          </div>\n\n          <select\n            className=\"form-select\"\n            value={selectedType}\n            onChange={(event) => setSelectedType(event.target.value)}\n          >\n            <option disabled value=\"\">Choose Pokemon type</option>\n            {types.map(type => (\n              <option key={type.name} value={type.name}>{type.name}</option>\n            ))}\n          </select>\n\n          <div className=\"row g-3\">\n            {pokemons.map(pokemon => (\n              <PokemonCard key={pokemon.url} pokemon={pokemon} />\n            ))}\n          </div>\n        </div>\n\n        {selectedPokemon !== null && (\n          <div className=\"pokemons__sidebar\">\n            <PokemonInfo pokemonInfo={selectedPokemon.info} />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { PokemonList } from './components/PokemonList';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PokemonList />\n        </div>\n\n        {/* <div className=\"App__content\">\n          123\n        </div> */}\n      </main>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store/index';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}