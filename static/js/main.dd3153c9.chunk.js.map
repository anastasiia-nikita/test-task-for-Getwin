{"version":3,"sources":["store/actions.ts","store/index.ts","api.ts","store/selectors.ts","components/PokemonCard/PokemonCard.tsx","components/PokemonInfo/PokemonInfo.tsx","components/PokemonList/PokemonList.tsx","App.tsx","index.tsx"],"names":["ActionType","SetSelectedPokemonAction","payload","type","SET_SELECTED_POKEMON","getFetchPokemonByURL","offset","dispatch","a","axios","get","responseCountAllResults","CountAllResults","data","count","allPokemonsFromServer","response","results","Promise","all","map","pokemon","url","dataAboutCurrentPokemon","infoAboutCurrentPokemon","undatePokemon","name","photo","sprites","front_default","types","info","stats","moves","pokemonWithInfo","SET_POKEMONS","initialState","pokemons","selectedPokemon","store","createStore","state","action","applyMiddleware","thunkMiddleware","getPockemonsType","getSelectedPokemonSelector","PokemonCard","useDispatch","useSelector","className","src","alt","classnames","onClick","currentPokemon","PokemonInfo","id","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","stat","base_stat","move","PokemonList","useState","setOffset","query","setQuery","setTypes","selectedType","setSelectedType","pokemonsByQuery","filter","toLowerCase","includes","some","item","getVisiblePokemons","useEffect","then","typesFromServer","console","log","offsets","newOffset","getPrevPokemons","getNextPokemons","placeholder","value","onChange","event","target","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dd3153c9.chunk.js","sourcesContent":["import axios from 'axios';\n// eslint-disable-next-line import/no-cycle\nimport { AppDispatch } from './index';\n// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { Pokemon, Type } from '../react-app-env';\n\n// eslint-disable-next-line no-shadow\nexport enum ActionType {\n  SET_POKEMONS = 'SET_POKEMONS',\n  SET_SELECTED_POKEMON = 'SET_SELECTED_POKEMON',\n}\n\ninterface SetPokemons {\n  type: ActionType.SET_POKEMONS,\n  payload: Pokemon[],\n}\n\ninterface SetSelectedPokemon {\n  type: ActionType.SET_SELECTED_POKEMON,\n  payload: Pokemon | null,\n}\n\nexport type Action = SetPokemons | SetSelectedPokemon;\n\nexport const SetPokemonsAction = (payload: Pokemon[]): Action => ({\n  type: ActionType.SET_POKEMONS,\n  payload,\n});\n\nexport const SetSelectedPokemonAction = (payload: Pokemon | null): Action => ({\n  type: ActionType.SET_SELECTED_POKEMON,\n  payload,\n});\n\n// export const getFetchPokemonByURL = () => {\n//   return (dispatch: AppDispatch) => {\n//     return axios.get('https://pokeapi.co/api/v2/pokemon?limit=20&offset=0')\n//       .then(response => dispatch(SetPokemonsAction(response.data.results)));\n//   };\n// };\n\n// export const getFetchPokemonByURL = () => {\n//   return async (dispatch: AppDispatch) => {\n//     const allPokemonsFromServer = await axios.get('https://pokeapi.co/api/v2/pokemon?limit=20&offset=0');\n//     const response = allPokemonsFromServer.data.results;\n//     const pokemonWithInfo: Pokemon[] = await Promise\n//       .all(response.map(async (pokemon: { url: string; name: string; }) => {\n//         const dataAboutCurrentPokemon = await axios.get(pokemon.url);\n//         const infoAboutCurrentPokemon = dataAboutCurrentPokemon.data;\n\n//         const undatePokemon: Pokemon = {\n//           name: pokemon.name,\n//           url: pokemon.url,\n//           photo: infoAboutCurrentPokemon.sprites.front_default,\n//           types: infoAboutCurrentPokemon.types.map((type: { type: Type; }) => ({\n//             name: type.type.name,\n//             url: type.type.url,\n//           })),\n//           info: {\n//             stats: infoAboutCurrentPokemon.stats,\n//             moves: infoAboutCurrentPokemon.moves,\n//           },\n//         };\n\n//         return undatePokemon;\n//       }));\n\n//     return dispatch(SetPokemonsAction(pokemonWithInfo));\n//   };\n// };\n\nexport const getFetchPokemonByURL = (offset: number) => {\n  return async (dispatch: AppDispatch) => {\n    const responseCountAllResults = await axios.get('https://pokeapi.co/api/v2/pokemon');\n    const CountAllResults = responseCountAllResults.data.count;\n\n    if (offset >= 0 && offset <= CountAllResults) {\n      const allPokemonsFromServer = await axios.get(`https://pokeapi.co/api/v2/pokemon?limit=20&offset=${offset}`);\n      const response = allPokemonsFromServer.data.results;\n      const pokemonWithInfo: Pokemon[] = await Promise\n        .all(response.map(async (pokemon: { url: string; name: string; }) => {\n          const dataAboutCurrentPokemon = await axios.get(pokemon.url);\n          const infoAboutCurrentPokemon = dataAboutCurrentPokemon.data;\n\n          const undatePokemon: Pokemon = {\n            name: pokemon.name,\n            url: pokemon.url,\n            photo: infoAboutCurrentPokemon.sprites.front_default,\n            types: infoAboutCurrentPokemon.types.map((type: { type: Type; }) => ({\n              name: type.type.name,\n              url: type.type.url,\n            })),\n            info: {\n              stats: infoAboutCurrentPokemon.stats,\n              moves: infoAboutCurrentPokemon.moves,\n            },\n          };\n\n          return undatePokemon;\n        }));\n\n      dispatch(SetPokemonsAction(pokemonWithInfo));\n    }\n  };\n};\n\n// export const getNextfetchPokemonByURL = (offset: number) => {\n//   return (dispatch: AppDispatch) => {\n//     return axios.get(`https://pokeapi.co/api/v2/pokemon?limit=20&offset=${offset}`)\n//       .then(response => dispatch(SetPokemonsAction(response.data.results)));\n//   };\n// };\n","import { createStore, applyMiddleware, AnyAction } from 'redux';\nimport thunkMiddleware, { ThunkDispatch } from 'redux-thunk';\n// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { State } from '../react-app-env';\n// eslint-disable-next-line import/no-cycle\nimport { Action, ActionType } from './actions';\n\nconst initialState: State = {\n  pokemons: [],\n  selectedPokemon: null,\n};\n\nconst reducer = (state = initialState, action: Action): State => {\n  switch (action.type) {\n    case ActionType.SET_POKEMONS:\n      return {\n        ...state,\n        pokemons: [...action.payload],\n      };\n\n    case ActionType.SET_SELECTED_POKEMON:\n      return {\n        ...state,\n        selectedPokemon: action.payload,\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport const store = createStore(reducer, applyMiddleware(thunkMiddleware));\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\nexport type TypedDispatch = ThunkDispatch<RootState, any, AnyAction>;\n","import axios from 'axios';\n\n// export const getPockemons = async (url:string) => {\n//   const response = await axios.get(url);\n\n//   return response.data;\n// };\n\n// export const getPockemonsInfo = async (url:string) => {\n//   const response = await axios.get(url);\n\n//   return response.data;\n// };\n\nexport const getPockemonsType = async () => {\n  const response = await axios.get('https://pokeapi.co/api/v2/type/');\n\n  return response.data;\n};\n","// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { State } from '../react-app-env';\n\nexport const getSelectedPokemonSelector = (state: State) => state.selectedPokemon;\n\nexport const getVisiblePokemons = (query: string, selectedType: string) => {\n  return (state: State) => {\n    const pokemonsByQuery = state.pokemons.filter(pokemon => (\n      pokemon.name.toLowerCase().includes(query.toLowerCase())\n    ));\n\n    if (selectedType) {\n      const pokemonsByType = pokemonsByQuery.filter(pokemon => (\n        pokemon.types.some(item => item.name === selectedType)\n      ));\n\n      return pokemonsByType;\n    }\n\n    return pokemonsByQuery;\n  };\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport './PokemonCard.scss';\nimport { useDispatch, useSelector } from 'react-redux';\n// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { Pokemon } from '../../react-app-env';\nimport { SetSelectedPokemonAction } from '../../store/actions';\nimport { getSelectedPokemonSelector } from '../../store/selectors';\nimport { TypedDispatch } from '../../store/index';\n\ninterface Props {\n  pokemon: Pokemon,\n}\n\nexport const PokemonCard: React.FC<Props> = ({ pokemon }) => {\n  const dispatch: TypedDispatch = useDispatch();\n  const selectedPokemon = useSelector(getSelectedPokemonSelector);\n\n  const selectPokemon = (currentPokemon: Pokemon) => {\n    if (selectedPokemon?.name !== currentPokemon.name) {\n      dispatch(SetSelectedPokemonAction(currentPokemon));\n    } else {\n      dispatch(SetSelectedPokemonAction(null));\n    }\n  };\n\n  return (\n    <div className=\"col-sm-6 col-md-4 col-xl-3\">\n      <div className=\"card border-black shadow\">\n        <img src={pokemon.photo} className=\"card__image\" alt={pokemon.name} />\n        <div className=\"card-body\">\n          <h5 className=\"card__title card-title\">{pokemon.name}</h5>\n\n          <div className=\"text-center mb-3\">\n            <span className=\"me-2\">Types:</span>\n            {pokemon.types.map((type => (\n              <button\n                type=\"button\"\n                className=\"btn btn-outline-secondary me-3\"\n                key={type.url}\n              >\n                {type.name}\n              </button>\n            )))}\n          </div>\n\n          <div className=\"text-center\">\n            <button\n              type=\"button\"\n              className={classnames('btn', 'btn-primary', {\n                'btn-danger': selectedPokemon?.name === pokemon.name,\n              })}\n              onClick={() => selectPokemon(pokemon)}\n            >\n              {selectedPokemon?.name !== pokemon.name ? 'Open details' : 'Close details'}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './PokemonInfo.scss';\nimport { useSelector } from 'react-redux';\nimport { getSelectedPokemonSelector } from '../../store/selectors';\n\nexport const PokemonInfo: React.FC = () => {\n  const selectedPokemon = useSelector(getSelectedPokemonSelector);\n\n  return (\n    <div className=\"container info\">\n      <h2 className=\"text-primary text-center\">{`Pokemon details: ${selectedPokemon?.name}`}</h2>\n      <div className=\"text-center\">\n        <img src={selectedPokemon?.photo} alt={selectedPokemon?.name} />\n      </div>\n\n      <div className=\"accordion\">\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingOne\">\n            <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\n              <strong>Types:</strong>\n            </button>\n          </h2>\n          <div id=\"collapseOne\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\n            <div className=\"accordion-body\">\n              {selectedPokemon?.types.map(type => (\n                <p key={type.url}>{type.name}</p>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\n            <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"true\" aria-controls=\"collapseTwo\">\n              <strong>Stats:</strong>\n            </button>\n          </h2>\n          <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\n            <div className=\"accordion-body\">\n              {selectedPokemon?.info.stats.map(stat => (\n                <p key={stat.stat.url}>{`${stat.stat.name} - ${stat.base_stat}`}</p>\n              ))}\n            </div>\n          </div>\n        </div>\n\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingThree\">\n            <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"true\" aria-controls=\"collapseThree\">\n              <strong>Moves:</strong>\n            </button>\n          </h2>\n          <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\n            <div className=\"accordion-body\">\n              {selectedPokemon?.info.moves.map(move => (\n                <p key={move.move.url}>{move.move.name}</p>\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './PokemonList.scss';\n// eslint-disable-next-line import/extensions, import/no-unresolved\nimport { Type } from '../../react-app-env';\nimport { getPockemonsType } from '../../api';\nimport { getFetchPokemonByURL } from '../../store/actions';\nimport { getVisiblePokemons, getSelectedPokemonSelector } from '../../store/selectors';\nimport { TypedDispatch } from '../../store/index';\n// eslint-disable-next-line import/named\nimport { PokemonCard } from '../PokemonCard';\nimport { PokemonInfo } from '../PokemonInfo';\n\nexport const PokemonList: React.FC = () => {\n  // getPockemonsInfo('https://pokeapi.co/api/v2/type/')\n  // // eslint-disable-next-line no-console\n  //   .then(pokemonsFromServer => console.log(pokemonsFromServer.results));\n\n  const dispatch: TypedDispatch = useDispatch();\n  const [offset,\n    setOffset,\n  ] = useState(0);\n  const [query, setQuery] = useState('');\n  const [types, setTypes] = useState<Type[]>([]);\n  const [selectedType, setSelectedType] = useState('');\n  const pokemons = useSelector(getVisiblePokemons(query, selectedType));\n  const selectedPokemon = useSelector(getSelectedPokemonSelector);\n\n  useEffect(() => {\n    dispatch(getFetchPokemonByURL(offset));\n\n    getPockemonsType()\n      .then(typesFromServer => setTypes(typesFromServer.results));\n  }, []);\n\n  // eslint-disable-next-line no-console\n  console.log(pokemons);\n\n  // eslint-disable-next-line no-console\n  console.log(selectedPokemon);\n\n  // const API = 'https://pokeapi.co/api/v2/pokemon';\n  // const pokemons = useSelector(getPokemonsSelector);\n\n  // getPockemons('https://pokeapi.co/api/v2/pokemon')\n  //   // eslint-disable-next-line no-console\n  //   .then(pokemonsFromServer => console.log(pokemonsFromServer));\n\n  // const infoAbout = await axios.get(pokemon.url);\n\n  const getNextPokemons = (offsets: number) => {\n    const newOffset = offsets + 20;\n    // const newOffset = offsets + 20;\n\n    dispatch(getFetchPokemonByURL(newOffset));\n    setOffset(newOffset);\n  };\n\n  const getPrevPokemons = (offsets: number) => {\n    const newOffset = offsets - 20;\n    // setOffset(offsets - 40);\n\n    dispatch(getFetchPokemonByURL(newOffset));\n    setOffset(newOffset);\n  };\n\n  // eslint-disable-next-line no-console\n  console.log(offset);\n\n  return (\n    <div className=\"pokemons\">\n      <div className=\"pokemons__block\">\n        <div className=\"pokemons__content container\">\n          <div className=\"text-center m-3\">\n            <img src=\"./images/pokeapi_256.png\" alt=\"logo\" />\n          </div>\n          <div className=\"text-center m-5\">\n            <button\n              type=\"button\"\n              className=\"btn btn-warning me-4\"\n              onClick={() => {\n                getPrevPokemons(offset);\n              }}\n            >\n              Previous page\n            </button>\n\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              onClick={() => {\n                getNextPokemons(offset);\n              }}\n            >\n              Next page\n            </button>\n          </div>\n\n          <div>\n            <input\n              type=\"text\"\n              className=\"form-control mb-2\"\n              placeholder=\"Search Pokemon\"\n              value={query}\n              onChange={(event) => setQuery(event.target.value)}\n            />\n          </div>\n\n          <select\n            className=\"form-select mb-4\"\n            value={selectedType}\n            onChange={(event) => setSelectedType(event.target.value)}\n          >\n            <option value=\"\">Choose Pokemon type</option>\n            {types.map(type => (\n              <option key={type.name} value={type.name}>{type.name}</option>\n            ))}\n          </select>\n\n          <div className=\"row g-3\">\n            {pokemons.map(pokemon => (\n              <PokemonCard key={pokemon.url} pokemon={pokemon} />\n            ))}\n          </div>\n        </div>\n\n        {selectedPokemon !== null && (\n          <div className=\"pokemons__sidebar\">\n            <PokemonInfo />\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import React from 'react';\nimport './App.scss';\nimport { PokemonList } from './components/PokemonList';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <main>\n        <PokemonList />\n      </main>\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { store } from './store/index';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}